#!/usr/bin/env bash
# xt_geoip_dl-convert2legacy
# updates GeoLite2 cache and exports it into a "legacy" format CSV file (so it can be used by xtables geoip)
#
# usage:
#   xt_geoip_dl-convert2legacy [SAVE-PATH](=GeoIPCountryWhois.csv)
#
# arguments:
#   SAVE-PATH : optionally specify path for legacy CSV file
#     default value: GeoIPCountryWhois.csv
#
# environment variables
#   GEOLITE2XTABLES_ROOT : path to GeoLite2xtables lib
#     default value: /usr/local/lib/GeoLite2xtables
#
# dependencies:
#   GeoLite2xtables: https://github.com/mschmitt/GeoLite2xtables
#   curl
#   unzip
#   perl
#   perl module NetAddr::IP
#
# see: https://github.com/katmore/xt_geoip-block-countries
# author: D. Bird <retran@gmail.com>
# (c) 2019 Doug Bird. All Rights Reserved
# Distributed under the terms of the MIT license or the GPLv3 license.
# This product includes GeoLite2 data created by MaxMind, available from https://www.maxmind.com
# The GeoLite2 databases are distributed under the Creative Commons Attribution-ShareAlike 4.0 International License.

LEGACY_CSV_PATH=GeoIPCountryWhois.csv

FALLBACK_GEOLITE2TABLES_ROOT=/usr/local/lib/GeoLite2xtables
[ -n "$GEOLITE2XTABLES_ROOT" ] || GEOLITE2XTABLES_ROOT=$FALLBACK_GEOLITE2TABLES_ROOT

LEGACY_CSV_TTL=604800

# TMP_COUNTRY_V4_CSV_PATH: IPv4 blocks by country csv
#   for some reason, GeoLite2xtables scripts hard-coded a paths in the /tmp dir
TMP_COUNTRY_V4_CSV_PATH=/tmp/GeoLite2-Country-Blocks-IPv4.csv

# TMP_COUNTRY_V4_CSV_PATH: IPv6 blocks by country csv
#   for some reason, GeoLite2xtables scripts hard-coded a paths in the /tmp dir
TMP_COUNTRY_V6_CSV_PATH=/tmp/GeoLite2-Country-Blocks-IPv6.csv

# TMP_COUNTRY_V4_CSV_PATH: ISO country codes
#   for some reason, GeoLite2xtables scripts hard-coded a paths in the /tmp dir
TMP_COUNTRY_TXT_PATH=/tmp/CountryInfo.txt

# FUNCTION: help
#   outputs reflective "help" message using comments from top of this script file
help() {
  local l=
  while read -r l; do
    [ "${l:0:1}" = "#" ] || break
    l=${l:1}
    [ -n "${l//[[:blank:]]/}" ] || l=""
    [ "${l:0:1}" != " " ] || l=${l:1}
    echo "$l"
  done < <(tail -n +2 "${BASH_SOURCE[0]}")
}

# parse options
while getopts huav-: o; do
  case "$o" in
    h|u|a|v) help; exit;;
    -)
    case "$OPTARG" in
      help|usage|about|version) help; exit;;
      '') break;;
    esac
    ;;
  esac
done
shift $((OPTIND-1))

# if <SAVE-PATH> arg is present,
#   use it for output path instead of the default $LEGACY_CSV_PATH (GeoIPCountryWhois.csv)
[ -z "$1" ] || {
	LEGACY_CSV_PATH="$1"
	shift
	# check write permission
	if [ -f "$LEGACY_CSV_PATH" ]; then
		[ -w "$LEGACY_CSV_PATH" ] || {
			>&2 echo "invalid <SAVE-PATH>, missing write permission: $LEGACY_CSV_PATH"
			exit 2
		}
	else
		[ -w "$(dirname $LEGACY_CSV_PATH)" ] || {
			>&2 echo "invalid <SAVE-PATH>, missing write permission to directory: $(realpath $(dirname $LEGACY_CSV_PATH))"
			exit 2
		}
	fi
	echo "SAVE-PATH: $LEGACY_CSV_PATH"
}

# if CSV file already exists ($LEGACY_CSV_PATH, 'GeoIPCountryWhois.csv' by default)
#   check age of file and exit if not older than TTL ($LEGACY_CSV_TTL, 1 week by default)
#
# in other words... avoid the somewhat lengthy process of downloading the GeoLite2 database 
#   and re-generating a formatted CSV unless it has been 1 week (by default) since last doing so
[ ! -s "$LEGACY_CSV_PATH" ] || {
	CSV_MODIFIED=$(stat -c "%Y" $LEGACY_CSV_PATH)
	CSV_AGE=$(( $(date +%s) - $CSV_MODIFIED ))
	[ "$CSV_AGE" -gt "$LEGACY_CSV_TTL" ] || {
		>&2 echo "CSV already exists that is younger than TTL of $LEGACY_CSV_TTL seconds: $(realpath $LEGACY_CSV_PATH)"
		exit 0
	}
}

# temp legacy CSV file
TMP_LEGACY_CSV_PATH=$(mktemp) || {
	>&2 echo "failed to prepare temporary legacy CSV file"
	exit 1
}
# temp combined CSV file
TMP_COMBINED_CSV_PATH=$(mktemp) || {
        >&2 echo "failed to prepare temporary combined CSV file"
        exit 1
}

# exit trap to delete temp files
cleanup() {
	rm -f $TMP_COUNTRY_V4_CSV_PATH
	rm -f $TMP_COUNTRY_V6_CSV_PATH
	rm -f $TMP_COMBINED_CSV_PATH
	rm -f $TMP_COUNTRY_TXT_PATH
	rm -f $TMP_LEGACY_CSV_PATH
}
trap cleanup EXIT

# remove existing "country" CSV files if they exist
for p in $TMP_COUNTRY_V4_CSV_PATH $TMP_COUNTRY_V6_CSV_PATH; do
	[ ! -f "$p" ] || {
		rm "$p" || {
        		>&2 echo "unable to delete existing download file: $p"
		        exit 1
		}
	}
done

# download the GeoLite2 database
DL_OUTPUT=$($GEOLITE2XTABLES_ROOT/00_download_geolite2 2>&1) || {
	DL_STATUS=$?
	>&2 echo "download error, 00_download_geolite2 failed with exit code $DL_STATUS..."
	>&2 echo "$DL_OUTPUT"
	return $DL_STATUS
}

# check that expected "country" CSV files exist (from execution of '00_download_geolite2' above)
for p in $TMP_COUNTRY_V4_CSV_PATH $TMP_COUNTRY_V6_CSV_PATH; do
	[ -f "$p" ] || {
		>&2 echo "missing expected download file: $p"
		exit 1
	}
done

# download countryinfo (ISO country codes)
DL_OUTPUT=$($GEOLITE2XTABLES_ROOT/10_download_countryinfo 2>&1) || {
        DL_STATUS=$?
        >&2 echo "download error, 10_download_countryinfo failed with exit code $DL_STATUS..."
        >&2 echo "$DL_OUTPUT"
        return $DL_STATUS
}

# check that expected countryinfo file exists (from execution of '10_download_countryinfo' above)
[ -f "$TMP_COUNTRY_TXT_PATH" ] || {
        >&2 echo "missing expected download file: $TMP_COUNTRY_TXT_PATH"
	exit 1
}

# combine ipv6 and ipv4 files
cat $TMP_COUNTRY_V4_CSV_PATH $TMP_COUNTRY_V6_CSV_PATH > $TMP_COMBINED_CSV_PATH || {
	>&2 echo "unable to combine csv files, 'cat' failed with status $?"
	exit 1
}

# export a legacy CSV from GeoLite2 data to a temp file ($TMP_LEGACY_CSV_PATH)
$GEOLITE2XTABLES_ROOT/20_convert_geolite2 $TMP_COUNTRY_TXT_PATH < $TMP_COMBINED_CSV_PATH > $TMP_LEGACY_CSV_PATH 2>/dev/null || {
	CMD_STATUS=$?
	if [ -s "$TMP_LEGACY_CSV_PATH" ]; then
		>&2 tail $TMP_LEGACY_CSV_PATH
	fi
	>&2 echo "cannot generate CSV file, '20_convert_geolite2' failed with status $CMD_STATUS"
	exit 1
}

# exit if newly exported legacy CSV is same as prior legacy CSV ($LEGACY_CSV_PATH vs. $TMP_LEGACY_CSV_PATH)
cmp -s $TMP_LEGACY_CSV_PATH $LEGACY_CSV_PATH &&\
	exit

# move the newly exported legacy CSV temp file to the actual path
mv $TMP_LEGACY_CSV_PATH $LEGACY_CSV_PATH
